Package sc;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];

Tokens

espaces = (' ' | 13 | 10)+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);
number = ['0'..'9']+;
plus ='+';
minus ='-';
mult ='*';
div ='/';
l_par ='(';
r_par =')';
inf = '<';
equal = '=';
and = '&';
or = '|';
neg = '!';
coma = ',';
semico = ';';
entier = 'entier';
lire = 'lire';
si = 'si';
alors = 'alors';
tq = 'tant que';
sinon = 'sinon';
ecrire = 'ecrire';

Ignored Tokens

espaces, commentaire;

Productions

//programme = optdecvar listedecfonc ;

eps =;
prog = listDecVarOpt listDecFct;
listDecFct = {decFctlistDecFct} decFct listDecFct | {epsilon} eps;
decFct = ID (listDecVar) listDecVarOpt instBloc;
listDecVarOpt = {listDecVar;} listDecVar ';' |{epsilon} eps;
listDecVar = {decVarlistDecVarBis} decVar listDecVarBis | {epsilon} eps;
listDecVarBis = {,decVarlistDecVarBis} ',' decVar listDecVarBis | {epsilon} eps;
inst ={instAff} instAff |{instSi} instSi | {instTantQ} instTantQ | {instAppel} instAppel |{instRet} instRet | {instEcrire} instEcrire; // | {instBloc} instBloc
instAff = var equal exp;
instSi =

