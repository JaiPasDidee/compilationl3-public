Package sc;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
alpha = [lettre + ['_' + '$']];
chiffre = ['0' .. '9'];
alphanum = [lettre + chiffre];

Tokens

espaces = (' ' | 13 | 10)+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);
number = ['0'..'9']+;
plus ='+';
minus ='-';
mult ='*';
div ='/';
l_par ='(';
r_par =')';
inf = '<';
equal = '=';
and = '&';
or = '|';
neg = '!';
coma = ',';
semico = ';';
entier = 'entier';
lire = 'lire';
si = 'si';
alors = 'alors';
tq = 'tant que';
sinon = 'sinon';
ecrire = 'ecrire';
l_tab = '[';
r_tab = ']';
l_hug = '{';
r_hug = '}';
id = alpha alphanum*;
retour = 'retour';
faire = 'faire';

Ignored Tokens

espaces, commentaire;

Productions

//programme = optdecvar listedecfonc ;

eps =;
prog = listdecvaropt listdecfct;
listdecfct = {decfctlistdecfct} decfct listdecfct | {epsilon} eps;
decfct = id l_par listdecvar r_par listdecvaropt instbloc;
listdecvaropt = {listdecvar} listdecvar semico | {epsilon} eps;
listdecvar = {decvarlistdecvarbis} decvar listdecvarbis | {epsilon} eps;
listdecvarbis = {decvarlistdecvarbis} coma decvar listdecvarbis | {epsilon} eps;
inst ={instaff} instaff |{instsi} instsi | {insttantq} insttantq | {instappel} instapp |{instret} instret | {instecrire} instecrire | {instbloc} instbloc;
instret = retour exp;
instaff = var equal exp semico;
instbloc = l_hug listinst r_hug;
instsi = {sialors} si exp alors instbloc | {sialorssinon} si exp alors instbloc sinoninstbloc;
sinoninstbloc = sinon instbloc;
insttantq = tq exp faire instbloc;
listinst = {instlistinst} inst listinst | {epsilon} eps;
instapp = app semico;
app = id l_par listexp r_par;
listexp = {listexp} coma exp listexp | {epsilon} eps; // A vÃ©rifier
instecrire = ecrire l_par exp r_par semico;
exp = {expore1} exp or e1 | {e1} e1;
e1 = {e1ore2} e1 or e2 | {e2} e2;
e2 = {e2equale3} e2 equal e3 | {e2infe3} e2 inf e3 | {e3} e3;
e3 = {e3pluse4} e3 plus e4 | {e3minuse4} e3 minus e4 | {e4} e4;
e4 = {e4multe5} e4 mult e5 | {e4dive5} e4 div e5 | {e5} e5;
e5 = {neg} neg e5 | {e6} e6;
e6 = {exp} l_par exp r_par | {nmbr} number | {app} app | {var} var | {lire} lire;
var = {id} id | {idtab} id l_tab exp r_tab;
decvar = {entierid} entier id | {entieridtab} entier id l_tab number r_tab;





